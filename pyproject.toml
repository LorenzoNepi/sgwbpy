# Python packaging user guide for the ultimate reference on
# pyproject.toml :
# https://packaging.python.org/en/latest/specifications/pyproject-toml/

# Specify what tool(s) are needed to build your package and what backend to call
# Suggested backend: hatchling
# https://github.com/pypa/hatch/tree/master/backend

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Metadata of the project: declare all the the dependecies needed to install
# the package in this section. They will be automatically installed.

[project]
name = "sgwbpy"
dynamic = ["version"] # "version" as a dynamic field so it is  automatically updated
description = "Project by Lorenzo Nepi for SGWB simulation and data analysis."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.12"
authors = [
  { name = "Lorenzo Nepi", email = "l.nepi@studenti.unipi.it" }
  ]
dependencies = [
  "numpy",
  ]

# Optional dependencies are listed here, grouped into logical sections.
# By default (e.g. upon "pip install .") optional dependencies are not
# installed, but they are when you do, e.g., "pip install .[dev]"
[project.optional-dependencies]
dev = [
    "pytest",
    "ruff",   #
    "pylint", # for the static analysis of the code
    "mypy",   #
    "nox"     # to automate some sessions

  ]
docs = [
    "sphinx",
    "sphinxawesome-theme",
  ]

# A few more useful fields...
[project.urls]
Homepage = "https://github.com/LorenzoNepi/sgwbpy"
Issues = "https://github.com/LorenzoNepi/sgwbpy/issues"

# Specify the python file that hatchling should read the version string from.
[tool.hatch.version]
path = "src/sgwbpy/_version.py"

# ruff configuration:
# https://docs.astral.sh/ruff/configuration/

[tool.ruff]
target-version = "py312"    # older Python version supported
line-length = 100           # max lenght of the code line
src = ["src"]               # directory that ruff has to analyze
exclude = ["docs"]          # path that ruff can ignore

# Specific useful linting rules for ruff (essentialy style rules):
[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes (for static errors)
  "I",   # isort (good sorting of imports)
  "B",   # flake8-bugbear (tips for potential bugs)
  "UP",  # pyupgrade (tips to upgrade the code)
  "SIM", # flake8-simplify (tips to simplify the code)
  "C4",  # flake8-comprehensions (tips for list/dict/set comprehension)
  "NPY", # NumPy-specific best practices
  "PERF" # performance gotchas (warnings for pattern with possible performance problem)
  ]

# Rules that ruff needs to ignore:
ignore = [
  "C408" # For dict() calls instead of litteral dicts (?)
  ]

# pylint configuration:
[tool.pylint.'MESSAGES CONTROL'] # Disabling some pylint messages
disable = [
  "missing-docstring",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-positional-arguments",
  "too-many-instance-attributes",
  "too-many-locals",
  "use-dict-literal",
  ]

[tool.pylint.'BASIC']           # Defining some acceptable names for variables for pylint
good-names = ["i", "j", "k", "x", "y", "z"]

[tool.pylint.'FORMAT']          # Defining accepted line length for pylint
max-line-length = 100


# mypy configuration:
# https://mypy.readthedocs.io/en/stable/config_file.html

[tool.mypy]
python_version = "3.12"         # Python version used in the project
files = ["src"]                 # directory of the code
exclude = ["docs"]              # directory to ignore

ignore_missing_imports = true   # doesn't care for missing type hints in external libraries

check_untyped_defs = true       # checks the code even in funtions without type hints
disallow_incomplete_defs = true # forsec to write type annotations in default arguments
disallow_untyped_defs = true    # forces to write type hints in all functions
allow_untyped_globals = true    # stop errors on untyped global variables

warn_unused_ignores = true      # warns if a "# type: ignore" is not needed
warn_redundant_casts = true     # checks for useless type hints
warn_unreachable = true         # warns for unreachable code
strict_optional = true          # strict checks for None values

pretty = true                   # returns a readable output
color_output = true